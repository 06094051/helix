#!/bin/bash
CLUSTER_NAME=TestCluster

#change these when using a different zookeeper
ZKUSER=express2
ZKPORT=2181
ZKADDRESS=$ZKUSER-md:$ZKPORT
START_ZOOKEEPER=/home/$ZKUSER/workspace/zookeeper-3.3.3/bin/zkServer.sh

BASE_DIR=/home/express1/workspace/cluster-manager-0.4.0/cluster-manager-core/target/cluster-manager-core-pkg/bin
CLUSTER_ADMIN=$BASE_DIR/cluster-admin
RUN_CLUSTER_MANAGER=$BASE_DIR/run-cluster-manager

USERS=(express1 express2 express3 express4 express5)
NODES=(express1-md express2-md express3-md express4-md express5-md)
START_PORT=16918
PORT_NR=20
RESOURCE_GROUP=TestDB
PARTITION_NR=128
STATE_MODEL_DEF=MasterSlave
REPLICA=3

BASE_MOCK_DIR=/home/EXPRESS_USER/workspace/cluster-manager-0.4.0/mockservice/target/mockservice-pkg/bin
RUN_MOCK_SERVICE_TEMPLATE=$BASE_MOCK_DIR/run-mock-espresso-service

: <<'END'
echo -e "zookeeper address:\t\t$ZKADDRESS"
echo -e "cluster-admin command:\t\t$CLUSTER_ADMIN"
echo -e "run-cluster-manager command:\t$RUN_CLUSTER_MANAGER"
echo -e "run-mock-service template:\t$RUN_MOCK_SERVICE_TEMPLATE"
echo -e "\v"
END

red='\e[00;31m'
green='\e[00;32m'

#colorful echo
function cecho
{
  message="$1"
  if [ -n "$message" ]; then
    color="$2"
    if [ -z "$color" ]; then
      echo "$message"
    else
      echo -e "$color$message\e[00m"
    fi
  fi
}

#clean zookeeper data log and then start zookeeper server
function startZookeeper
{
  cecho ">>Start zookeeper on $ZKUSER-md:$ZKPORT" $green
  ZK_LOG_DIR=/home/$ZKUSER/workspace/zookeeper-log/$ZKPORT
  ssh $ZKUSER@$ZKUSER-md rm -rf $ZK_LOG_DIR
  ssh $ZKUSER@$ZKUSER-md mkdir -p $ZK_LOG_DIR/data
  ssh $ZKUSER@$ZKUSER-md $START_ZOOKEEPER start > /dev/null 2>&1 &
  sleep 1
  ps aux | grep $START_ZOOKEEPER | grep -v "grep" | awk '{print$2}' | xargs kill
}

function stopZookeeper
{
  cecho ">>Stop zookeeper on $ZKUSER-md:$ZKPORT" $green
  ssh $ZKUSER@$ZKUSER-md $START_ZOOKEEPER stop > /dev/null
#  pid=`ssh $ZKUSER@$ZKUSER-md ps aux | grep QuorumPeerMain | awk '{print $2}'`
#  if [ -z "$pid" ]; then
#    cecho "FAIL to kill zookeeper server on $ZKUSER@$ZKUSER-md" $red
#  else
#    echo "Killing zookeeper server $pid on $ZKUSER@$ZKUSER-md"
#    ssh $ZKUSER@$ZKUSER-md kill -9 $pid
#  fi
  sleep 1
}

#setup cluster
function setupCluster
{
  #: <<'END'
  cecho ">>Setup cluster" $green
  echo -e "Adding cluster:\t\t$CLUSTER_NAME"
  ssh express1@express1-md chmod +x $CLUSTER_ADMIN
  ssh express1@express1-md $CLUSTER_ADMIN --zkSvr $ZKADDRESS --addCluster $CLUSTER_NAME
  for node in ${NODES[*]}
  do
    for port in ${PORTS[*]}
    do
      echo -e "Adding node:\t\t$node:$port"
      ssh express1@express1-md $CLUSTER_ADMIN --zkSvr $ZKADDRESS --addNode $CLUSTER_NAME $node:$port
    done
  done

  echo -e "Adding resource:\t$RESOURCE_GROUP $PARTITION_NR $STATE_MODEL_DEF"
  ssh express1@express1-md $CLUSTER_ADMIN --zkSvr $ZKADDRESS --addResourceGroup $CLUSTER_NAME $RESOURCE_GROUP $PARTITION_NR $STATE_MODEL_DEF

  echo -e "Rebalancing resource:\t$RESOURCE_GROUP $REPLICA"
  ssh express1@express1-md $CLUSTER_ADMIN --zkSvr $ZKADDRESS --rebalance $CLUSTER_NAME $RESOURCE_GROUP $REPLICA
  #END
}

#start cluster controller and then start all participants
function startNodes
{
  cecho ">>Start nodes" $green
  #: <<'END'
  ssh express1@express1-md chmod +x $RUN_CLUSTER_MANAGER
  pid=`ssh express1@express1-md ps aux | grep ClusterManagerMain | grep $CLUSTER_NAME | awk '{print $2}'`
  if [ -z "$pid" ]; then
    echo "Starting controller on $CLUSTER_NAME"
    ssh express1@express1-md $RUN_CLUSTER_MANAGER --zkSvr $ZKADDRESS --cluster $CLUSTER_NAME > /dev/null 2>&1 &
    sleep 1
    ps aux | grep $RUN_CLUSTER_MANAGER | grep $CLUSTER_NAME | grep -v "grep" | awk '{print$2}' | xargs kill
  else
    cecho "FAIL to start controller on $CLUSTER_NAME, since it's already running" $red
  fi
  #END

  #start participants on all {node:port}'s
  #: <<'END'
  NODE_NR=${#NODES[@]}
  for (( i=0; i<${NODE_NR}; i++ ))
  do
    node=${NODES[$i]}
    user=${USERS[$i]}

    RUN_MOCK_SERVICE=${RUN_MOCK_SERVICE_TEMPLATE/EXPRESS_USER/$user}
    echo -e "run-mock-service command:\t$RUN_MOCK_SERVICE"
    ssh $user@$node chmod +x $RUN_MOCK_SERVICE

    for port in ${PORTS[*]}
    do
      pid=`ssh $user@$node ps aux | grep MockEspressoService | grep $CLUSTER_NAME | grep $node:$port | awk '{print $2}'`
      if [ -z "$pid" ]; then
        echo -e "Starting participant:\t$node:$port on $CLUSTER_NAME"
        ssh $user@$node $RUN_MOCK_SERVICE --port $port -zkSvr $ZKADDRESS -clusterName $CLUSTER_NAME -instanceName $node:$port </dev/null >/dev/null 2>&1 &
        sleep 1
        pid=`ps aux | grep $RUN_MOCK_SERVICE | grep $CLUSTER_NAME | grep $node:$port | grep -v "grep" | awk '{print$2}'`
        if [ -n "$pid" ]; then
          kill $pid
        fi

        #check node is running
#        pid=`ssh $user@$node ps aux | grep MockEspressoService | grep $CLUSTER_NAME | grep $node:$port | awk '{print $2}'`
#        if [ -z "$pid" ]; then
#          cecho "FAIL to start participant $node:$port on $CLUSTER_NAME" $red
#        fi
      else
        cecho "FAIL to start participant $node:$port on $CLUSTER_NAME, since it's already running" $red
      fi
    done
  done
#  sleep 30
  #END
}

#random pick N participant processes to kill
#  wait for session timeout (~30s)
#  and restart killed partitipants
function killRandomAndRestart
{
  #: <<'END'
  KILL_NR=1
  NODE_NR=${#NODES[@]}
  j=0
  unset PROC_TAB
  unset KILL_PROC_TAB
  for (( i=0; i<${NODE_NR}; i++ ))
  do
    node=${NODES[$i]}
    user=${USERS[$i]}
    for port in ${PORTS[*]}
    do
      PROC_TAB["$j"]=$user:$node:$port
      j=`expr $j + 1` 
    done
  done
  echo -e "PROC_TAB:\t${PROC_TAB[@]}"

  for i in `shuf --input-range=0-$(( ${#PROC_TAB[*]} - 1 )) | head -${KILL_NR}`
  do
    echo -e "Select partiticipant to kill:\t${PROC_TAB[$i]}"
    KILL_PROC_TAB=("${KILL_PROC_TAB[@]}" "${PROC_TAB[$i]}")
  done
  echo -e "KILL_PROC_TAB(usr:node:port):\t${KILL_PROC_TAB[@]}"

  for kill_proc in ${KILL_PROC_TAB[*]}
  do
    user=`echo ${kill_proc} | cut -f1 -d:`
    node=`echo ${kill_proc} | cut -f2 -d:`
    port=`echo ${kill_proc} | cut -f3 -d:`
    pid=`ssh $user@$node ps aux | grep MockEspressoService | grep $CLUSTER_NAME | grep $node:$port | awk '{print $2}'`
    if [ -z "$pid" ]; then
      cecho "FAIL to kill participant $node:$port, since it's not running" $red
    else
      echo "Killing participant pid:$pid on $user@$node:$port"
      ssh $user@$node kill -9 $pid
    fi
  done

  sleep 30
  echo "Session timeout for ${KILL_PROC_TAB[*]}"
  #END

  sleep 30  
  
  #restart killed participant process
  #: <<'END'
  for kill_proc in ${KILL_PROC_TAB[*]}
  do
    user=`echo ${kill_proc} | cut -f1 -d:`
    node=`echo ${kill_proc} | cut -f2 -d:`
    port=`echo ${kill_proc} | cut -f3 -d:`
    pid=`ssh $user@$node ps aux | grep MockEspressoService | grep $CLUSTER_NAME | grep $node:$port  | awk '{print $2}'`
    if [ -z "$pid" ]; then
      echo "Restarting participant $node:$port on $CLUSTER_NAME"
      RUN_MOCK_SERVICE=${RUN_MOCK_SERVICE_TEMPLATE/EXPRESS_USER/$user}
      ssh $user@$node $RUN_MOCK_SERVICE --port $port -zkSvr $ZKADDRESS -clusterName $CLUSTER_NAME -instanceName $node:$port </dev/null >/dev/null 2>&1 & 
      sleep 1
      ps aux | grep $RUN_MOCK_SERVICE | grep $CLUSTER_NAME | grep $node:$port | grep -v "grep" | awk '{print$2}' | xargs kill
    else
      cecho "FAIL to restart participant $node:$port on $CLUSTER_NAME, since it's already running" $red
    fi
  done
  #END
}

#kill controller and then kill all participants
function cleanup
{
  cecho ">>Cleanup" $green
  #kill cluster controller
  #: <<'END'
  pid=`ssh express1@express1-md ps aux | grep ClusterManagerMain | grep $CLUSTER_NAME | awk '{print $2}'`
  if [ -z "$pid" ]; then
    cecho "FAIL to kill controller on $CLUSTER_NAME" $red
  else
    echo "Killing controller process $pid on $CLUSTER_NAME"
    ssh express1@express1-md kill -9 $pid
    sleep 1
  fi
  #END

  #kill all participant processes
  #: <<'END'
  for (( i=0; i<${NODE_NR}; i++ ))
  do
    node=${NODES[$i]}
    user=${USERS[$i]}
    for port in ${PORTS[*]}
    do
      pid=`ssh $user@$node ps aux | grep MockEspressoService | grep $CLUSTER_NAME | grep $node:$port | awk '{print $2}'`
      if [ -z "$pid" ]; then
      cecho "FAIL to kill participant $node:$port on $CLUSTER_NAME" $red
    else
      echo "Killing participant pid:$pid $node:$port on $CLUSTER_NAME"
      ssh $user@$node kill -9 $pid
      sleep 1
    fi
    done
  done
  #END
}

#########################
# execution starts here
#########################
#: <<'END'

#PORTS=(16918 16920)
END_PORT=$START_PORT+$PORT_NR*2
for (( k=$START_PORT; k<$END_PORT; k+=2 ))
{
  PORTS=("${PORTS[@]}" "$k")
}
echo -e "PORTS:\t${PORTS[@]}"

startZookeeper
setupCluster

startNodes
sleep 180

#do test
for (( k=0; k<60; k++ ))
do
  cecho ">>Test round_$k" $green
  killRandomAndRestart
  sleep 30
done

cleanup
stopZookeeper
#END




