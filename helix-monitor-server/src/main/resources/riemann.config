; -*- mode: clojure; -*-
; vim: filetype=clojure

; Licensed to the Apache Software Foundation (ASF) under one
; or more contributor license agreements.  See the NOTICE file
; distributed with this work for additional information
; regarding copyright ownership.  The ASF licenses this file
; to you under the Apache License, Version 2.0 (the
; "License"); you may not use this file except in compliance
; with the License.  You may obtain a copy of the License at
;
;   http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing,
; software distributed under the License is distributed on an
; "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
; KIND, either express or implied.  See the License for the
; specific language governing permissions and limitations
; under the License.

(logging/init :file "/dev/null")

(tcp-server :host "0.0.0.0")

(instrumentation {:interval 1})

(udp-server :host "0.0.0.0")
(ws-server :host "0.0.0.0")
(repl-server :host "0.0.0.0")
(use 'clj-helix.admin)

(def admin (helix-admin "localhost:2185"))

(add-cluster admin :my-app)

(def fsm-def
 (clj-helix.fsm/fsm-definition
  {:name :OnlineOffline
   :states
    {:DROPPED {:transitions :OFFLINE}
     :ONLINE {:priority 1 :upper-bound :R :transitions :OFFLINE}
     :OFFLINE {:initial? true :transitions [:ONLINE :DROPPED]}}}))

(add-fsm-definition admin :my-app fsm-def)

(add-resource admin :my-app {:resource   :some-resouce
                             :partitions 128
                             :replicas   5
                             :state-model (:name fsm-def)})

(add-instance admin :my-app {:host "localhost"
                                         :port 5555})
(use 'clj-helix.manager)

(def f (clj-helix.fsm/fsm fsm-def
     (:OFFLINE :ONLINE [part message context]
       (prn part :coming-online))

     (:OFFLINE :DROPPED [part m c]
       (prn part "dropped!"))

     (:ONLINE :OFFLINE [part m c]
       (prn part "Going offline."))))

(def p (participant {:zookeeper "localhost:2185"
                     :cluster   :my-app
                     :instance {:host "localhost" :port 5555}
                     :fsm       f}))

(periodically-expire 1)

(let [index (default :ttl 3 (update-index (index)))]
  (streams
    (expired prn)
    index))

